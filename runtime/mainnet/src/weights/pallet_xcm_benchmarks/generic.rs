// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_xcm_benchmarks :: generic`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `6dc8d980c745`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-xcm-benchmarks :: generic
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_xcm_benchmarks/generic.rs
// --template
// /data/benchmark/scripts/templates/deploy-weight-template-xcm.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_xcm_benchmarks :: generic` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

#[allow(dead_code)]
impl<T: frame_system::Config> ZKVEvmWeight<T> {
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn report_holding() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `75`
        //  Estimated: `1560`
        // Minimum execution time: 20_735_000 picoseconds.
        Weight::from_parts(21_612_000, 1560)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn buy_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 965_000 picoseconds.
        Weight::from_parts(1_044_000, 0)
    }
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    pub(crate) fn pay_fees() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `3581`
        // Minimum execution time: 3_880_000 picoseconds.
        Weight::from_parts(4_081_000, 3581)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    pub(crate) fn asset_claimer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 984_000 picoseconds.
        Weight::from_parts(1_066_000, 0)
    }
    /// Storage: `ZKVXcm::Queries` (r:1 w:0)
    /// Proof: `ZKVXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn query_response() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `3465`
        // Minimum execution time: 6_478_000 picoseconds.
        Weight::from_parts(6_776_000, 3465)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    pub(crate) fn transact() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_104_000 picoseconds.
        Weight::from_parts(9_355_000, 0)
    }
    pub(crate) fn refund_surplus() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_508_000 picoseconds.
        Weight::from_parts(1_620_000, 0)
    }
    pub(crate) fn set_error_handler() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 919_000 picoseconds.
        Weight::from_parts(961_000, 0)
    }
    pub(crate) fn set_appendix() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 905_000 picoseconds.
        Weight::from_parts(1_010_000, 0)
    }
    pub(crate) fn clear_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 888_000 picoseconds.
        Weight::from_parts(953_000, 0)
    }
    pub(crate) fn descend_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 967_000 picoseconds.
        Weight::from_parts(1_043_000, 0)
    }
    /// Storage: `Benchmark::Override` (r:0 w:0)
    /// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn execute_with_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
        Weight::from_parts(18_446_744_073_709_551_000, 0)
    }
    pub(crate) fn clear_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 957_000 picoseconds.
        Weight::from_parts(1_014_000, 0)
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn report_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `75`
        //  Estimated: `1560`
        // Minimum execution time: 15_363_000 picoseconds.
        Weight::from_parts(16_082_000, 1560)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ZKVXcm::AssetTraps` (r:1 w:1)
    /// Proof: `ZKVXcm::AssetTraps` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn claim_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `23`
        //  Estimated: `3488`
        // Minimum execution time: 9_884_000 picoseconds.
        Weight::from_parts(10_248_000, 3488)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn trap() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 862_000 picoseconds.
        Weight::from_parts(942_000, 0)
    }
    /// Storage: `ZKVXcm::VersionNotifyTargets` (r:1 w:1)
    /// Proof: `ZKVXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn subscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6`
        //  Estimated: `3471`
        // Minimum execution time: 18_419_000 picoseconds.
        Weight::from_parts(18_771_000, 3471)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifyTargets` (r:0 w:1)
    /// Proof: `ZKVXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn unsubscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_941_000 picoseconds.
        Weight::from_parts(3_117_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn burn_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_244_000 picoseconds.
        Weight::from_parts(1_336_000, 0)
    }
    pub(crate) fn expect_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 928_000 picoseconds.
        Weight::from_parts(1_006_000, 0)
    }
    pub(crate) fn expect_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 891_000 picoseconds.
        Weight::from_parts(940_000, 0)
    }
    pub(crate) fn expect_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 871_000 picoseconds.
        Weight::from_parts(938_000, 0)
    }
    pub(crate) fn expect_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_022_000 picoseconds.
        Weight::from_parts(1_082_000, 0)
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn query_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `75`
        //  Estimated: `1560`
        // Minimum execution time: 18_875_000 picoseconds.
        Weight::from_parts(19_724_000, 1560)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn expect_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_968_000 picoseconds.
        Weight::from_parts(4_075_000, 0)
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn report_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `75`
        //  Estimated: `1560`
        // Minimum execution time: 14_803_000 picoseconds.
        Weight::from_parts(15_452_000, 1560)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn clear_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 857_000 picoseconds.
        Weight::from_parts(972_000, 0)
    }
    pub(crate) fn set_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 816_000 picoseconds.
        Weight::from_parts(875_000, 0)
    }
    pub(crate) fn clear_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 821_000 picoseconds.
        Weight::from_parts(885_000, 0)
    }
    pub(crate) fn set_fees_mode() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 827_000 picoseconds.
        Weight::from_parts(881_000, 0)
    }
    pub(crate) fn unpaid_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 789_000 picoseconds.
        Weight::from_parts(849_000, 0)
    }
}
