// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_sudo`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `637ae3e726cd`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-sudo
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_sudo.rs
// --template
// /data/benchmark/scripts/templates/deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_sudo` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_sudo::WeightInfo for ZKVEvmWeight<T> {
    /// Storage: `Sudo::Key` (r:1 w:1)
    /// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
    fn set_key() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86`
        //  Estimated: `1505`
        // Minimum execution time: 13_479_000 picoseconds.
        Weight::from_parts(14_313_000, 1505)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Sudo::Key` (r:1 w:0)
    /// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
    fn sudo() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86`
        //  Estimated: `1505`
        // Minimum execution time: 15_037_000 picoseconds.
        Weight::from_parts(15_316_000, 1505)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// Storage: `Sudo::Key` (r:1 w:0)
    /// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
    fn sudo_as() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86`
        //  Estimated: `1505`
        // Minimum execution time: 14_669_000 picoseconds.
        Weight::from_parts(15_306_000, 1505)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// Storage: `Sudo::Key` (r:1 w:1)
    /// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
    fn remove_key() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86`
        //  Estimated: `1505`
        // Minimum execution time: 11_715_000 picoseconds.
        Weight::from_parts(12_148_000, 1505)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Sudo::Key` (r:1 w:0)
    /// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(20), added: 515, mode: `MaxEncodedLen`)
    fn check_only_sudo_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86`
        //  Estimated: `1505`
        // Minimum execution time: 5_494_000 picoseconds.
        Weight::from_parts(5_893_000, 1505)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
}
