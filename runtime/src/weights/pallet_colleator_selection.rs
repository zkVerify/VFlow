// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_colleator_selection`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-04-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `miklap`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /home/mdamico/devel/zkVerify-EVM-Parachain/target/release/zkv-evm-para-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-colleator-selection
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /home/mdamico/devel/zkVerify-EVM-Parachain/HEADER-APACHE2
// --output
// /home/mdamico/devel/zkVerify-EVM-Parachain/runtime/src/weights/pallet_colleator_selection.rs
// --template
// /home/mdamico/devel/zkVerify-EVM-Parachain/scripts/templates/deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_colleator_selection` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_collator_selection::WeightInfo for ZKVEvmWeight<T> {
    /// Storage: `Session::NextKeys` (r:5 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(101), added: 596, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[1, 5]`.
    fn set_invulnerables(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + b * (64 ±0)`
        //  Estimated: `1188 + b * (2539 ±0)`
        // Minimum execution time: 17_012_000 picoseconds.
        Weight::from_parts(18_462_809, 1188)
            // Standard Error: 34_192
            .saturating_add(Weight::from_parts(1_671_390, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2539).saturating_mul(b.into()))
    }
    /// Storage: `Session::NextKeys` (r:1 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(101), added: 596, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[1, 4]`.
    /// The range of component `c` is `[1, 49]`.
    fn add_invulnerable(b: u32, c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720 + b * (21 ±0) + c * (45 ±0)`
        //  Estimated: `4180 + b * (40 ±1) + c * (45 ±0)`
        // Minimum execution time: 40_883_000 picoseconds.
        Weight::from_parts(52_019_216, 4180)
            // Standard Error: 5_569
            .saturating_add(Weight::from_parts(129_503, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
            .saturating_add(Weight::from_parts(0, 40).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 45).saturating_mul(c.into()))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(101), added: 596, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[3, 5]`.
    fn remove_invulnerable(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `149 + b * (21 ±0)`
        //  Estimated: `3286`
        // Minimum execution time: 12_659_000 picoseconds.
        Weight::from_parts(13_131_159, 3286)
            // Standard Error: 13_026
            .saturating_add(Weight::from_parts(112_293, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
    /// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn set_desired_candidates() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_355_000 picoseconds.
        Weight::from_parts(5_551_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:50 w:50)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:50)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 50]`.
    /// The range of component `k` is `[0, 50]`.
    fn set_candidacy_bond(c: u32, k: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + c * (159 ±0) + k * (112 ±0)`
        //  Estimated: `3581 + c * (890 ±29) + k * (890 ±29)`
        // Minimum execution time: 11_320_000 picoseconds.
        Weight::from_parts(11_482_000, 3581)
            // Standard Error: 189_356
            .saturating_add(Weight::from_parts(6_522_165, 0).saturating_mul(c.into()))
            // Standard Error: 189_356
            .saturating_add(Weight::from_parts(6_167_108, 0).saturating_mul(k.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
            .saturating_add(Weight::from_parts(0, 890).saturating_mul(c.into()))
            .saturating_add(Weight::from_parts(0, 890).saturating_mul(k.into()))
    }
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 50]`.
    fn update_bond(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `342 + c * (38 ±0)`
        //  Estimated: `3286`
        // Minimum execution time: 28_768_000 picoseconds.
        Weight::from_parts(33_366_558, 3286)
            // Standard Error: 5_018
            .saturating_add(Weight::from_parts(79_795, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(101), added: 596, mode: `MaxEncodedLen`)
    /// Storage: `Session::NextKeys` (r:1 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 49]`.
    fn register_as_candidate(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `664 + c * (44 ±0)`
        //  Estimated: `4108 + c * (45 ±0)`
        // Minimum execution time: 42_088_000 picoseconds.
        Weight::from_parts(44_938_936, 4108)
            // Standard Error: 27_634
            .saturating_add(Weight::from_parts(433_017, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 45).saturating_mul(c.into()))
    }
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(101), added: 596, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Session::NextKeys` (r:1 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:2)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 50]`.
    fn take_candidate_slot(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `766 + c * (44 ±0)`
        //  Estimated: `4210 + c * (45 ±0)`
        // Minimum execution time: 59_800_000 picoseconds.
        Weight::from_parts(64_076_042, 4210)
            // Standard Error: 4_603
            .saturating_add(Weight::from_parts(142_265, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(Weight::from_parts(0, 45).saturating_mul(c.into()))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(101), added: 596, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 50]`.
    fn leave_intent(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `340 + c * (36 ±0)`
        //  Estimated: `3286`
        // Minimum execution time: 31_530_000 picoseconds.
        Weight::from_parts(34_656_646, 3286)
            // Standard Error: 7_492
            .saturating_add(Weight::from_parts(148_843, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    fn note_author() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `90`
        //  Estimated: `6172`
        // Minimum execution time: 48_024_000 picoseconds.
        Weight::from_parts(48_974_000, 6172)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1801), added: 2296, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:50 w:0)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(101), added: 596, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
    /// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:49 w:49)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 50]`.
    /// The range of component `c` is `[1, 50]`.
    fn new_session(r: u32, c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1125 + c * (72 ±0) + r * (111 ±0)`
        //  Estimated: `3581 + c * (2507 ±0) + r * (2591 ±0)`
        // Minimum execution time: 21_272_000 picoseconds.
        Weight::from_parts(21_611_000, 3581)
            // Standard Error: 324_786
            .saturating_add(Weight::from_parts(14_186_988, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2507).saturating_mul(c.into()))
            .saturating_add(Weight::from_parts(0, 2591).saturating_mul(r.into()))
    }
}
