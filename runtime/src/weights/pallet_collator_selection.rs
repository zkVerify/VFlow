// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_collator_selection`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `5936bce9fd96`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-collator-selection
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_collator_selection.rs
// --template
// /data/benchmark/scripts/templates/deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_collator_selection` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_collator_selection::WeightInfo for ZKVEvmWeight<T> {
    /// Storage: `Session::NextKeys` (r:10 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[1, 10]`.
    fn set_invulnerables(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `194 + b * (65 ±0)`
        //  Estimated: `1185 + b * (2540 ±0)`
        // Minimum execution time: 9_898_000 picoseconds.
        Weight::from_parts(6_431_638, 1185)
            // Standard Error: 19_197
            .saturating_add(Weight::from_parts(3_596_419, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
    }
    /// Storage: `Session::NextKeys` (r:1 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[1, 9]`.
    /// The range of component `c` is `[1, 29]`.
    fn add_invulnerable(b: u32, c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `897 + b * (20 ±0) + c * (44 ±0)`
        //  Estimated: `4354 + b * (15 ±0) + c * (45 ±0)`
        // Minimum execution time: 37_426_000 picoseconds.
        Weight::from_parts(41_079_175, 4354)
            // Standard Error: 28_976
            .saturating_add(Weight::from_parts(33_595, 0).saturating_mul(b.into()))
            // Standard Error: 8_762
            .saturating_add(Weight::from_parts(118_371, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
            .saturating_add(Weight::from_parts(0, 15).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 45).saturating_mul(c.into()))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[2, 10]`.
    fn remove_invulnerable(b: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `186 + b * (20 ±0)`
        //  Estimated: `2566`
        // Minimum execution time: 9_778_000 picoseconds.
        Weight::from_parts(10_046_382, 2566)
            // Standard Error: 2_284
            .saturating_add(Weight::from_parts(142_124, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
    /// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn set_desired_candidates() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_036_000 picoseconds.
        Weight::from_parts(4_172_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:30 w:30)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:30)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 30]`.
    /// The range of component `k` is `[0, 30]`.
    fn set_candidacy_bond(c: u32, k: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + c * (163 ±0) + k * (114 ±0)`
        //  Estimated: `3581 + c * (872 ±29) + k * (872 ±29)`
        // Minimum execution time: 8_833_000 picoseconds.
        Weight::from_parts(9_005_000, 3581)
            // Standard Error: 144_035
            .saturating_add(Weight::from_parts(5_006_235, 0).saturating_mul(c.into()))
            // Standard Error: 144_035
            .saturating_add(Weight::from_parts(4_705_781, 0).saturating_mul(k.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
            .saturating_add(Weight::from_parts(0, 872).saturating_mul(c.into()))
            .saturating_add(Weight::from_parts(0, 872).saturating_mul(k.into()))
    }
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 30]`.
    fn update_bond(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374 + c * (38 ±0)`
        //  Estimated: `2566`
        // Minimum execution time: 25_577_000 picoseconds.
        Weight::from_parts(27_028_515, 2566)
            // Standard Error: 2_900
            .saturating_add(Weight::from_parts(192_833, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
    /// Storage: `Session::NextKeys` (r:1 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 29]`.
    fn register_as_candidate(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638 + c * (48 ±0)`
        //  Estimated: `4093 + c * (49 ±0)`
        // Minimum execution time: 34_257_000 picoseconds.
        Weight::from_parts(36_526_165, 4093)
            // Standard Error: 3_233
            .saturating_add(Weight::from_parts(261_752, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 49).saturating_mul(c.into()))
    }
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::CandidacyBond` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Session::NextKeys` (r:1 w:0)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:2)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 30]`.
    fn take_candidate_slot(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `725 + c * (48 ±0)`
        //  Estimated: `4185 + c * (49 ±0)`
        // Minimum execution time: 47_542_000 picoseconds.
        Weight::from_parts(51_572_396, 4185)
            // Standard Error: 7_800
            .saturating_add(Weight::from_parts(229_118, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(Weight::from_parts(0, 49).saturating_mul(c.into()))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:1)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[1, 30]`.
    fn leave_intent(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `373 + c * (36 ±0)`
        //  Estimated: `2566`
        // Minimum execution time: 27_837_000 picoseconds.
        Weight::from_parts(28_927_143, 2566)
            // Standard Error: 1_810
            .saturating_add(Weight::from_parts(193_380, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    fn note_author() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `90`
        //  Estimated: `6172`
        // Minimum execution time: 33_486_000 picoseconds.
        Weight::from_parts(34_047_000, 6172)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `CollatorSelection::CandidateList` (r:1 w:0)
    /// Proof: `CollatorSelection::CandidateList` (`max_values`: Some(1), `max_size`: Some(1081), added: 1576, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::LastAuthoredBlock` (r:30 w:0)
    /// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
    /// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(201), added: 696, mode: `MaxEncodedLen`)
    /// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
    /// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:29 w:29)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 30]`.
    /// The range of component `c` is `[1, 30]`.
    fn new_session(r: u32, c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `427 + c * (73 ±0) + r * (125 ±0)`
        //  Estimated: `3581 + c * (2507 ±0) + r * (2591 ±0)`
        // Minimum execution time: 19_222_000 picoseconds.
        Weight::from_parts(19_687_000, 3581)
            // Standard Error: 240_838
            .saturating_add(Weight::from_parts(10_956_718, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2507).saturating_mul(c.into()))
            .saturating_add(Weight::from_parts(0, 2591).saturating_mul(r.into()))
    }
}
