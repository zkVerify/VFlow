// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_xcm_benchmarks :: fungible`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `c4b83e0efddf`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-xcm-benchmarks :: fungible
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_xcm_benchmarks/fungible.rs
// --template
// /data/benchmark/scripts/templates/deploy-weight-template-xcm.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_xcm_benchmarks :: fungible` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

#[allow(dead_code)]
impl<T: frame_system::Config> ZKVEvmWeight<T> {
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    pub(crate) fn withdraw_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `91`
        //  Estimated: `3581`
        // Minimum execution time: 47_961_000 picoseconds.
        Weight::from_parts(49_491_000, 3581)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    pub(crate) fn transfer_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `131`
        //  Estimated: `6172`
        // Minimum execution time: 65_508_000 picoseconds.
        Weight::from_parts(67_703_000, 6172)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn transfer_reserve_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `206`
        //  Estimated: `6172`
        // Minimum execution time: 85_506_000 picoseconds.
        Weight::from_parts(86_636_000, 6172)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Benchmark::Override` (r:0 w:0)
    /// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn reserve_asset_deposited() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
        Weight::from_parts(18_446_744_073_709_551_000, 0)
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn initiate_reserve_withdraw() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `75`
        //  Estimated: `1560`
        // Minimum execution time: 39_823_000 picoseconds.
        Weight::from_parts(54_418_000, 1560)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn receive_teleported_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_516_000 picoseconds.
        Weight::from_parts(3_785_000, 0)
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    pub(crate) fn deposit_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `40`
        //  Estimated: `3581`
        // Minimum execution time: 34_708_000 picoseconds.
        Weight::from_parts(36_009_000, 3581)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn deposit_reserve_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `115`
        //  Estimated: `3581`
        // Minimum execution time: 61_231_000 picoseconds.
        Weight::from_parts(64_471_000, 3581)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn initiate_teleport() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `75`
        //  Estimated: `1560`
        // Minimum execution time: 32_393_000 picoseconds.
        Weight::from_parts(33_537_000, 1560)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    pub(crate) fn initiate_transfer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `115`
        //  Estimated: `3581`
        // Minimum execution time: 78_027_000 picoseconds.
        Weight::from_parts(80_897_000, 3581)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}
