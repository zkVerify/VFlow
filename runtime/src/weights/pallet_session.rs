// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_session`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-04-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `miklap`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /home/mdamico/devel/zkVerify-EVM-Parachain/target/release/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-session
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /home/mdamico/devel/zkVerify-EVM-Parachain/HEADER-APACHE2
// --output
// /home/mdamico/devel/zkVerify-EVM-Parachain/runtime/src/weights/pallet_session.rs
// --template
// /home/mdamico/devel/zkVerify-EVM-Parachain/scripts/templates/deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_session` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_session::WeightInfo for ZKVEvmWeight<T> {
    /// Storage: `Session::NextKeys` (r:1 w:1)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Session::KeyOwner` (r:1 w:1)
    /// Proof: `Session::KeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn set_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `283`
        //  Estimated: `3748`
        // Minimum execution time: 35_374_000 picoseconds.
        Weight::from_parts(38_042_000, 3748)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Session::NextKeys` (r:1 w:1)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Session::KeyOwner` (r:0 w:1)
    /// Proof: `Session::KeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn purge_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `265`
        //  Estimated: `3730`
        // Minimum execution time: 24_411_000 picoseconds.
        Weight::from_parts(25_347_000, 3730)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}
