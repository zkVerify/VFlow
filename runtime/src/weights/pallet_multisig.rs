// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-05-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `drhorizen`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /home/daniele/horizen/git/zkVerify-EVM-Parachain/target/release/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-multisig
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /home/daniele/horizen/git/zkVerify-EVM-Parachain/HEADER-APACHE2
// --output
// /home/daniele/horizen/git/zkVerify-EVM-Parachain/runtime/src/weights/pallet_multisig.rs
// --template
// /home/daniele/horizen/git/zkVerify-EVM-Parachain/scripts/templates/deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_multisig` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_multisig::WeightInfo for ZKVEvmWeight<T> {
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_threshold_1(z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_512_000 picoseconds.
        Weight::from_parts(13_726_393, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(344, 0).saturating_mul(z.into()))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_create(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `180`
        //  Estimated: `5587`
        // Minimum execution time: 47_636_000 picoseconds.
        Weight::from_parts(46_586_049, 5587)
            // Standard Error: 3_814
            .saturating_add(Weight::from_parts(61_671, 0).saturating_mul(s.into()))
            // Standard Error: 37
            .saturating_add(Weight::from_parts(894, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[3, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_approve(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `5587`
        // Minimum execution time: 25_644_000 picoseconds.
        Weight::from_parts(19_808_710, 5587)
            // Standard Error: 2_004
            .saturating_add(Weight::from_parts(81_193, 0).saturating_mul(s.into()))
            // Standard Error: 19
            .saturating_add(Weight::from_parts(1_153, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_complete(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `311 + s * (20 Â±0)`
        //  Estimated: `5587`
        // Minimum execution time: 47_904_000 picoseconds.
        Weight::from_parts(44_158_863, 5587)
            // Standard Error: 3_468
            .saturating_add(Weight::from_parts(87_089, 0).saturating_mul(s.into()))
            // Standard Error: 33
            .saturating_add(Weight::from_parts(962, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_create(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `182`
        //  Estimated: `5587`
        // Minimum execution time: 33_939_000 picoseconds.
        Weight::from_parts(36_340_038, 5587)
            // Standard Error: 3_208
            .saturating_add(Weight::from_parts(108_053, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_approve(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `5587`
        // Minimum execution time: 18_223_000 picoseconds.
        Weight::from_parts(19_208_636, 5587)
            // Standard Error: 1_516
            .saturating_add(Weight::from_parts(78_539, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(2122), added: 4597, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn cancel_as_multi(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `5587`
        // Minimum execution time: 37_458_000 picoseconds.
        Weight::from_parts(39_926_147, 5587)
            // Standard Error: 3_490
            .saturating_add(Weight::from_parts(76_316, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
