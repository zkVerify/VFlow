// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_assets`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-04-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `miklap`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /home/mdamico/devel/zkVerify-EVM-Parachain/target/release/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-assets
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /home/mdamico/devel/zkVerify-EVM-Parachain/HEADER-APACHE2
// --output
// /home/mdamico/devel/zkVerify-EVM-Parachain/runtime/src/weights/pallet_assets.rs
// --template
// /home/mdamico/devel/zkVerify-EVM-Parachain/scripts/templates/deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_assets` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_assets::WeightInfo for ZKVEvmWeight<T> {
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::NextAssetId` (r:1 w:0)
    /// Proof: `Assets::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn create() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `278`
        //  Estimated: `3627`
        // Minimum execution time: 53_335_000 picoseconds.
        Weight::from_parts(54_830_000, 3627)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::NextAssetId` (r:1 w:0)
    /// Proof: `Assets::NextAssetId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn force_create() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `116`
        //  Estimated: `3627`
        // Minimum execution time: 22_732_000 picoseconds.
        Weight::from_parts(23_347_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn start_destroy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266`
        //  Estimated: `3627`
        // Minimum execution time: 21_412_000 picoseconds.
        Weight::from_parts(22_806_000, 3627)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:1001 w:1000)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1000 w:1000)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 1000]`.
    fn destroy_accounts(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `365 + c * (183 ±0)`
        //  Estimated: `3627 + c * (2591 ±0)`
        // Minimum execution time: 27_420_000 picoseconds.
        Weight::from_parts(28_007_000, 3627)
            // Standard Error: 24_742
            .saturating_add(Weight::from_parts(18_206_318, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Approvals` (r:1001 w:1000)
    /// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 1000]`.
    fn destroy_approvals(a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `413 + a * (74 ±0)`
        //  Estimated: `3627 + a * (2599 ±0)`
        // Minimum execution time: 21_254_000 picoseconds.
        Weight::from_parts(21_741_000, 3627)
            // Standard Error: 35_301
            .saturating_add(Weight::from_parts(22_967_278, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2599).saturating_mul(a.into()))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Metadata` (r:1 w:0)
    /// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
    fn finish_destroy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `342`
        //  Estimated: `3627`
        // Minimum execution time: 20_531_000 picoseconds.
        Weight::from_parts(21_415_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    fn mint() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `365`
        //  Estimated: `3627`
        // Minimum execution time: 32_964_000 picoseconds.
        Weight::from_parts(33_997_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    fn burn() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `403`
        //  Estimated: `3627`
        // Minimum execution time: 41_869_000 picoseconds.
        Weight::from_parts(43_622_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:2 w:2)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn transfer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `494`
        //  Estimated: `6160`
        // Minimum execution time: 58_992_000 picoseconds.
        Weight::from_parts(61_018_000, 6160)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:2 w:2)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn transfer_keep_alive() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `494`
        //  Estimated: `6160`
        // Minimum execution time: 53_149_000 picoseconds.
        Weight::from_parts(55_836_000, 6160)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:2 w:2)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn force_transfer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `494`
        //  Estimated: `6160`
        // Minimum execution time: 59_427_000 picoseconds.
        Weight::from_parts(61_980_000, 6160)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:0)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    fn freeze() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `403`
        //  Estimated: `3627`
        // Minimum execution time: 23_747_000 picoseconds.
        Weight::from_parts(24_310_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:0)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    fn thaw() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `403`
        //  Estimated: `3627`
        // Minimum execution time: 23_886_000 picoseconds.
        Weight::from_parts(24_948_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn freeze_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266`
        //  Estimated: `3627`
        // Minimum execution time: 15_957_000 picoseconds.
        Weight::from_parts(16_657_000, 3627)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn thaw_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266`
        //  Estimated: `3627`
        // Minimum execution time: 15_631_000 picoseconds.
        Weight::from_parts(16_575_000, 3627)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Metadata` (r:1 w:0)
    /// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
    fn transfer_ownership() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `342`
        //  Estimated: `3627`
        // Minimum execution time: 20_531_000 picoseconds.
        Weight::from_parts(21_124_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn set_team() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266`
        //  Estimated: `3627`
        // Minimum execution time: 16_019_000 picoseconds.
        Weight::from_parts(16_635_000, 3627)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:0)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Metadata` (r:1 w:1)
    /// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[0, 50]`.
    /// The range of component `s` is `[0, 50]`.
    fn set_metadata(_n: u32, _s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `342`
        //  Estimated: `3627`
        // Minimum execution time: 40_350_000 picoseconds.
        Weight::from_parts(45_437_431, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:0)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Metadata` (r:1 w:1)
    /// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
    fn clear_metadata() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `470`
        //  Estimated: `3627`
        // Minimum execution time: 39_751_000 picoseconds.
        Weight::from_parts(42_079_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:0)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Metadata` (r:1 w:1)
    /// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[0, 50]`.
    /// The range of component `s` is `[0, 50]`.
    fn force_set_metadata(n: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `229`
        //  Estimated: `3627`
        // Minimum execution time: 19_302_000 picoseconds.
        Weight::from_parts(20_263_776, 3627)
            // Standard Error: 2_922
            .saturating_add(Weight::from_parts(152, 0).saturating_mul(n.into()))
            // Standard Error: 2_922
            .saturating_add(Weight::from_parts(18_625, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:0)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Metadata` (r:1 w:1)
    /// Proof: `Assets::Metadata` (`max_values`: None, `max_size`: Some(140), added: 2615, mode: `MaxEncodedLen`)
    fn force_clear_metadata() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `470`
        //  Estimated: `3627`
        // Minimum execution time: 40_301_000 picoseconds.
        Weight::from_parts(42_186_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn force_asset_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266`
        //  Estimated: `3627`
        // Minimum execution time: 15_544_000 picoseconds.
        Weight::from_parts(16_501_000, 3627)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Approvals` (r:1 w:1)
    /// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
    fn approve_transfer() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266`
        //  Estimated: `3627`
        // Minimum execution time: 44_919_000 picoseconds.
        Weight::from_parts(50_494_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Approvals` (r:1 w:1)
    /// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:2 w:2)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn transfer_approved() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `588`
        //  Estimated: `6160`
        // Minimum execution time: 85_342_000 picoseconds.
        Weight::from_parts(89_160_000, 6160)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Approvals` (r:1 w:1)
    /// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
    fn cancel_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `412`
        //  Estimated: `3627`
        // Minimum execution time: 45_391_000 picoseconds.
        Weight::from_parts(49_217_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Approvals` (r:1 w:1)
    /// Proof: `Assets::Approvals` (`max_values`: None, `max_size`: Some(124), added: 2599, mode: `MaxEncodedLen`)
    fn force_cancel_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `412`
        //  Estimated: `3627`
        // Minimum execution time: 45_838_000 picoseconds.
        Weight::from_parts(48_785_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn set_min_balance() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266`
        //  Estimated: `3627`
        // Minimum execution time: 16_401_000 picoseconds.
        Weight::from_parts(17_472_000, 3627)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn touch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `493`
        //  Estimated: `3627`
        // Minimum execution time: 47_983_000 picoseconds.
        Weight::from_parts(49_923_000, 3627)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn touch_other() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `365`
        //  Estimated: `3627`
        // Minimum execution time: 44_611_000 picoseconds.
        Weight::from_parts(45_809_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn refund() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `548`
        //  Estimated: `3627`
        // Minimum execution time: 45_320_000 picoseconds.
        Weight::from_parts(46_812_000, 3627)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    fn refund_other() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440`
        //  Estimated: `3627`
        // Minimum execution time: 42_736_000 picoseconds.
        Weight::from_parts(43_883_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:0)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    fn block() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `403`
        //  Estimated: `3627`
        // Minimum execution time: 23_881_000 picoseconds.
        Weight::from_parts(24_449_000, 3627)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(162), added: 2637, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:2 w:2)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(110), added: 2585, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
    fn transfer_all() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `494`
        //  Estimated: `6160`
        // Minimum execution time: 68_645_000 picoseconds.
        Weight::from_parts(72_806_000, 6160)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
}
