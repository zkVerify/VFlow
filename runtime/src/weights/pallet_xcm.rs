// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_xcm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `58a287c2c7f5`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-para-evm-node
// benchmark
// pallet
// --genesis-builder=spec
// --pallet
// pallet-xcm
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_xcm.rs
// --template
// /data/benchmark/scripts/templates/deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_xcm` using the zkVerify node and recommended hardware.
pub struct ZKVEvmWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_xcm::WeightInfo for ZKVEvmWeight<T> {
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn send() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6`
        //  Estimated: `1491`
        // Minimum execution time: 20_797_000 picoseconds.
        Weight::from_parts(22_124_000, 1491)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParachainInfo::ParachainId` (r:1 w:0)
    /// Proof: `ParachainInfo::ParachainId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn teleport_assets() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `75`
        //  Estimated: `1560`
        // Minimum execution time: 85_358_000 picoseconds.
        Weight::from_parts(88_202_000, 1560)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Benchmark::Override` (r:0 w:0)
    /// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn reserve_transfer_assets() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
        Weight::from_parts(18_446_744_073_709_551_000, 0)
    }
    /// Storage: `Benchmark::Override` (r:0 w:0)
    /// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn transfer_assets() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
        Weight::from_parts(18_446_744_073_709_551_000, 0)
    }
    fn execute() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_206_000 picoseconds.
        Weight::from_parts(11_496_000, 0)
    }
    /// Storage: `ZKVXcm::SupportedVersion` (r:0 w:1)
    /// Proof: `ZKVXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_xcm_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_622_000 picoseconds.
        Weight::from_parts(9_874_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn force_default_xcm_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_104_000 picoseconds.
        Weight::from_parts(3_305_000, 0)
    }
    /// Storage: `ZKVXcm::VersionNotifiers` (r:1 w:1)
    /// Proof: `ZKVXcm::VersionNotifiers` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ZKVXcm::QueryCounter` (r:1 w:1)
    /// Proof: `ZKVXcm::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ZKVXcm::Queries` (r:0 w:1)
    /// Proof: `ZKVXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_subscribe_version_notify() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6`
        //  Estimated: `3471`
        // Minimum execution time: 27_128_000 picoseconds.
        Weight::from_parts(27_799_000, 3471)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifiers` (r:1 w:1)
    /// Proof: `ZKVXcm::VersionNotifiers` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ZKVXcm::Queries` (r:0 w:1)
    /// Proof: `ZKVXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_unsubscribe_version_notify() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `99`
        //  Estimated: `3564`
        // Minimum execution time: 28_737_000 picoseconds.
        Weight::from_parts(29_455_000, 3564)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ZKVXcm::XcmExecutionSuspended` (r:0 w:1)
    /// Proof: `ZKVXcm::XcmExecutionSuspended` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn force_suspension() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_859_000 picoseconds.
        Weight::from_parts(3_068_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ZKVXcm::SupportedVersion` (r:6 w:2)
    /// Proof: `ZKVXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn migrate_supported_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `22`
        //  Estimated: `15862`
        // Minimum execution time: 25_795_000 picoseconds.
        Weight::from_parts(26_525_000, 15862)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifiers` (r:6 w:2)
    /// Proof: `ZKVXcm::VersionNotifiers` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn migrate_version_notifiers() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26`
        //  Estimated: `15866`
        // Minimum execution time: 26_115_000 picoseconds.
        Weight::from_parts(26_546_000, 15866)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifyTargets` (r:7 w:0)
    /// Proof: `ZKVXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn already_notified_target() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `39`
        //  Estimated: `18354`
        // Minimum execution time: 30_500_000 picoseconds.
        Weight::from_parts(30_851_000, 18354)
            .saturating_add(T::DbWeight::get().reads(7_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifyTargets` (r:2 w:1)
    /// Proof: `ZKVXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn notify_current_targets() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `39`
        //  Estimated: `5979`
        // Minimum execution time: 24_143_000 picoseconds.
        Weight::from_parts(24_798_000, 5979)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifyTargets` (r:5 w:0)
    /// Proof: `ZKVXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn notify_target_migration_fail() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `13407`
        // Minimum execution time: 20_552_000 picoseconds.
        Weight::from_parts(21_217_000, 13407)
            .saturating_add(T::DbWeight::get().reads(5_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifyTargets` (r:6 w:2)
    /// Proof: `ZKVXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn migrate_version_notify_targets() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `33`
        //  Estimated: `15873`
        // Minimum execution time: 25_670_000 picoseconds.
        Weight::from_parts(26_221_000, 15873)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `ZKVXcm::VersionNotifyTargets` (r:6 w:2)
    /// Proof: `ZKVXcm::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
    /// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
    /// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn migrate_and_notify_old_targets() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `39`
        //  Estimated: `15879`
        // Minimum execution time: 38_697_000 picoseconds.
        Weight::from_parts(40_822_000, 15879)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ZKVXcm::QueryCounter` (r:1 w:1)
    /// Proof: `ZKVXcm::QueryCounter` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ZKVXcm::Queries` (r:0 w:1)
    /// Proof: `ZKVXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn new_query() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1485`
        // Minimum execution time: 3_022_000 picoseconds.
        Weight::from_parts(3_196_000, 1485)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `ZKVXcm::Queries` (r:1 w:1)
    /// Proof: `ZKVXcm::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn take_response() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `7576`
        //  Estimated: `11041`
        // Minimum execution time: 29_173_000 picoseconds.
        Weight::from_parts(29_481_000, 11041)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ZKVXcm::AssetTraps` (r:1 w:1)
    /// Proof: `ZKVXcm::AssetTraps` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn claim_assets() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `23`
        //  Estimated: `3488`
        // Minimum execution time: 44_116_000 picoseconds.
        Weight::from_parts(47_779_000, 3488)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
